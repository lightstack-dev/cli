import crypto from 'crypto';

// Generate secure random secrets for production
export function generateSupabaseSecrets() {
  return {
    postgresPassword: crypto.randomBytes(32).toString('base64url'),
    jwtSecret: crypto.randomBytes(32).toString('base64url'),
    anonKey: generateJWTKey('anon'),
    serviceKey: generateJWTKey('service_role'),
    // Supavisor/Cloak expects EXACTLY 32 characters which it treats as 32 bytes for AES-256
    // Using hex substring to get exactly 32 chars (16 bytes of randomness)
    vaultEncKey: crypto.randomBytes(16).toString('hex'),  // 16 bytes = 32 hex chars
    pgMetaCryptoKey: crypto.randomBytes(32).toString('hex'),  // 64 hex chars for pg_meta encryption
  };
}

// Generate a JWT key (simplified - in production would use proper JWT library)
function generateJWTKey(_role: string): string {
  // This is a placeholder - in reality, we'd generate proper JWT tokens
  // signed with the jwtSecret
  return crypto.randomBytes(32).toString('base64url');
}

/**
 * Generate environment file content for official Supabase stack
 * Uses actual secret values (not variable references) for Docker Compose compatibility
 */
export function generateSupabaseEnvFile(
  env: string,
  projectName: string,
  appDomain: string,
  apiDomain: string,
  _studioDomain: string, // Currently unused, but reserved for future Studio configuration
  secrets: Record<string, string>
): string {
  const prefix = env.toUpperCase();

  // Get actual secret values from the secrets object
  const postgresPassword = secrets[`${prefix}_POSTGRES_PASSWORD`] || '';
  const jwtSecret = secrets[`${prefix}_JWT_SECRET`] || '';
  const anonKey = secrets[`${prefix}_ANON_KEY`] || '';
  const serviceKey = secrets[`${prefix}_SERVICE_KEY`] || '';

  return `############
# Supabase Self-Hosted Stack Configuration
# Generated by Lightstack CLI for ${env} environment
# Contains actual secret values (not variable references)
############

# PostgreSQL Database
POSTGRES_HOST=db
POSTGRES_PORT=5432
POSTGRES_DB=postgres
POSTGRES_PASSWORD=${postgresPassword}

# JWT Configuration
JWT_SECRET=${jwtSecret}
JWT_EXPIRY=3600
ANON_KEY=${anonKey}
SERVICE_ROLE_KEY=${serviceKey}

# API Configuration
API_EXTERNAL_URL=https://${apiDomain}
SUPABASE_PUBLIC_URL=https://${apiDomain}

# Studio Configuration
STUDIO_DEFAULT_ORGANIZATION=${projectName}
STUDIO_DEFAULT_PROJECT=${projectName}

# Auth Configuration
SITE_URL=https://${appDomain}
ADDITIONAL_REDIRECT_URLS=
DISABLE_SIGNUP=false
ENABLE_EMAIL_SIGNUP=true
ENABLE_EMAIL_AUTOCONFIRM=${env === 'production' ? 'false' : 'true'}
ENABLE_PHONE_SIGNUP=false
ENABLE_PHONE_AUTOCONFIRM=false
ENABLE_ANONYMOUS_USERS=false

# SMTP Configuration (for auth emails)
SMTP_ADMIN_EMAIL=admin@${appDomain}
SMTP_HOST=
SMTP_PORT=587
SMTP_USER=
SMTP_PASS=
SMTP_SENDER_NAME=${projectName}

# Email Templates
MAILER_URLPATHS_INVITE=/auth/v1/verify
MAILER_URLPATHS_CONFIRMATION=/auth/v1/verify
MAILER_URLPATHS_RECOVERY=/auth/v1/verify
MAILER_URLPATHS_EMAIL_CHANGE=/auth/v1/verify

############
# Dashboard Credentials
############

DASHBOARD_USERNAME=supabase
DASHBOARD_PASSWORD=${postgresPassword}

############
# Database Settings
############

PGRST_DB_SCHEMAS=public,storage,graphql_public

############
# Kong API Gateway
############

KONG_HTTP_PORT=8000
KONG_HTTPS_PORT=8443

############
# Analytics
############

LOGFLARE_PUBLIC_ACCESS_TOKEN=${jwtSecret}
LOGFLARE_PRIVATE_ACCESS_TOKEN=${jwtSecret}

############
# Realtime
############

SECRET_KEY_BASE=${jwtSecret}

############
# Connection Pooler
############

POOLER_TENANT_ID=pooler
POOLER_DEFAULT_POOL_SIZE=20
POOLER_MAX_CLIENT_CONN=100
POOLER_DB_POOL_SIZE=10
POOLER_PROXY_PORT_TRANSACTION=6543

############
# Encryption Keys
############

VAULT_ENC_KEY=${secrets[`${prefix}_VAULT_ENC_KEY`] || ''}
PG_META_CRYPTO_KEY=${secrets[`${prefix}_PG_META_CRYPTO_KEY`] || ''}

############
# Functions
############

FUNCTIONS_VERIFY_JWT=false

############
# Misc
############

IMGPROXY_ENABLE_WEBP_DETECTION=true
DOCKER_SOCKET_LOCATION=/var/run/docker.sock
`;
}