import crypto from 'crypto';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

export interface SupabaseStackConfig {
  projectName: string;
  domain: string;
  environment: string;
  sslEmail?: string;
}

// Generate secure random secrets for production
export function generateSupabaseSecrets() {
  return {
    postgresPassword: crypto.randomBytes(32).toString('base64url'),
    jwtSecret: crypto.randomBytes(32).toString('base64url'),
    anonKey: generateJWTKey('anon'),
    serviceKey: generateJWTKey('service_role'),
    // Supavisor/Cloak expects EXACTLY 32 characters which it treats as 32 bytes for AES-256
    // Using hex substring to get exactly 32 chars (16 bytes of randomness)
    vaultEncKey: crypto.randomBytes(16).toString('hex'),  // 16 bytes = 32 hex chars
    pgMetaCryptoKey: crypto.randomBytes(32).toString('hex'),  // 64 hex chars for pg_meta encryption
  };
}

// Generate a JWT key (simplified - in production would use proper JWT library)
function generateJWTKey(_role: string): string {
  // This is a placeholder - in reality, we'd generate proper JWT tokens
  // signed with the jwtSecret
  return crypto.randomBytes(32).toString('base64url');
}

// Generate the complete Supabase Docker Compose stack for production
export function generateSupabaseStack(config: SupabaseStackConfig): string {
  const { projectName, domain, environment } = config;
  const envPrefix = environment.toUpperCase();

  // For local testing of production stack
  const isLocalProd = environment === 'production' && domain === 'local.lightstack.dev';

  return `# Supabase Self-Hosted Stack for ${environment}
# Generated by Lightstack CLI
# Secrets are loaded from .env file (gitignored)

services:
  # PostgreSQL Database
  db:
    image: supabase/postgres:15.1.0.117
    container_name: ${projectName}-db
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      POSTGRES_PASSWORD: \${${envPrefix}_POSTGRES_PASSWORD}
      POSTGRES_DB: postgres
    volumes:
      - ./volumes/db/data:/var/lib/postgresql/data
      - ./volumes/db/init:/docker-entrypoint-initdb.d
    networks:
      - lightstack
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Kong API Gateway
  kong:
    image: kong:2.8.1
    container_name: ${projectName}-kong
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
    environment:
      KONG_DATABASE: "off"
      KONG_DECLARATIVE_CONFIG: /var/lib/kong/kong.yml
      KONG_DNS_ORDER: LAST,A,CNAME
    volumes:
      - ./volumes/api/kong.yml:/var/lib/kong/kong.yml:ro
    networks:
      - lightstack
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.kong.rule=Host(\`api.${domain}\`)"
      - "traefik.http.routers.kong.tls=true"
      - "traefik.http.services.kong.loadbalancer.server.port=8000"
      ${isLocalProd ? '' : '- "traefik.http.routers.kong.tls.certresolver=letsencrypt"'}

  # GoTrue Authentication
  auth:
    image: supabase/gotrue:v2.99.0
    container_name: ${projectName}-auth
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
    environment:
      GOTRUE_API_HOST: 0.0.0.0
      GOTRUE_API_PORT: 9999
      GOTRUE_DB_DRIVER: postgres
      GOTRUE_DB_DATABASE_URL: postgres://postgres:\${${envPrefix}_POSTGRES_PASSWORD}@db:5432/postgres?search_path=auth
      GOTRUE_SITE_URL: https://${domain}
      GOTRUE_URI_ALLOW_LIST: "*"
      GOTRUE_JWT_SECRET: \${${envPrefix}_JWT_SECRET}
      GOTRUE_JWT_EXP: 3600
      GOTRUE_JWT_DEFAULT_GROUP_NAME: authenticated
      GOTRUE_DISABLE_SIGNUP: false
      GOTRUE_EXTERNAL_EMAIL_ENABLED: true
      GOTRUE_MAILER_AUTOCONFIRM: ${environment === 'production' ? 'false' : 'true'}
      GOTRUE_SMTP_HOST: \${SMTP_HOST:-localhost}
      GOTRUE_SMTP_PORT: \${SMTP_PORT:-587}
      GOTRUE_SMTP_USER: \${SMTP_USER}
      GOTRUE_SMTP_PASS: \${SMTP_PASS}
      GOTRUE_SMTP_SENDER_NAME: \${SMTP_SENDER_NAME:-${projectName}}
      API_EXTERNAL_URL: https://api.${domain}
    networks:
      - lightstack

  # PostgREST
  rest:
    image: postgrest/postgrest:v11.2.0
    container_name: ${projectName}-rest
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
    environment:
      PGRST_DB_URI: postgres://postgres:\${${envPrefix}_POSTGRES_PASSWORD}@db:5432/postgres
      PGRST_DB_SCHEMAS: public,storage,graphql_public
      PGRST_DB_ANON_ROLE: anon
      PGRST_JWT_SECRET: \${${envPrefix}_JWT_SECRET}
      PGRST_DB_USE_LEGACY_GUCS: false
    networks:
      - lightstack

  # Realtime
  realtime:
    image: supabase/realtime:v2.25.35
    container_name: ${projectName}-realtime
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
    environment:
      APP_NAME: ${projectName}
      PORT: 4000
      DB_HOST: db
      DB_PORT: 5432
      DB_NAME: postgres
      DB_USER: postgres
      DB_PASSWORD: \${${envPrefix}_POSTGRES_PASSWORD}
      DB_SSL: disable
      JWT_SECRET: \${${envPrefix}_JWT_SECRET}
      SECRET_KEY_BASE: \${${envPrefix}_JWT_SECRET}
      REPLICATION_MODE: RLS
      REPLICATION_POLL_INTERVAL: 100
      SECURE_CHANNELS: true
      SLOT_NAME: supabase_realtime_rls
      TEMPORARY_SLOT: true
    networks:
      - lightstack

  # Storage
  storage:
    image: supabase/storage-api:v0.43.11
    container_name: ${projectName}-storage
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
      rest:
        condition: service_started
    environment:
      ANON_KEY: \${${envPrefix}_ANON_KEY}
      SERVICE_KEY: \${${envPrefix}_SERVICE_KEY}
      AUTH_JWT_SECRET: \${${envPrefix}_JWT_SECRET}
      DATABASE_URL: postgres://postgres:\${${envPrefix}_POSTGRES_PASSWORD}@db:5432/postgres?search_path=storage
      PGRST_JWT_SECRET: \${${envPrefix}_JWT_SECRET}
      POSTGREST_URL: http://rest:3000
      FILE_SIZE_LIMIT: 52428800
      STORAGE_BACKEND: file
      FILE_STORAGE_BACKEND_PATH: /var/lib/storage
      TENANT_ID: stub
      REGION: local
      GLOBAL_S3_BUCKET: stub
    volumes:
      - ./volumes/storage:/var/lib/storage
    networks:
      - lightstack

  # Supabase Studio
  studio:
    image: supabase/studio:20231123-64a766a
    container_name: ${projectName}-studio
    restart: unless-stopped
    environment:
      STUDIO_PG_META_URL: http://meta:8080
      POSTGRES_PASSWORD: \${${envPrefix}_POSTGRES_PASSWORD}
      DEFAULT_ORGANIZATION_NAME: ${projectName}
      DEFAULT_PROJECT_NAME: ${projectName}
      SUPABASE_URL: https://api.${domain}
      SUPABASE_PUBLIC_URL: https://api.${domain}
      SUPABASE_ANON_KEY: \${${envPrefix}_ANON_KEY}
      SUPABASE_SERVICE_KEY: \${${envPrefix}_SERVICE_KEY}
    networks:
      - lightstack
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.studio.rule=Host(\`studio.${domain}\`)"
      - "traefik.http.routers.studio.tls=true"
      - "traefik.http.services.studio.loadbalancer.server.port=3000"
      ${isLocalProd ? '' : '- "traefik.http.routers.studio.tls.certresolver=letsencrypt"'}

  # Postgres Meta
  meta:
    image: supabase/postgres-meta:v0.68.0
    container_name: ${projectName}-meta
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
    environment:
      PG_META_PORT: 8080
      PG_META_DB_HOST: db
      PG_META_DB_PORT: 5432
      PG_META_DB_NAME: postgres
      PG_META_DB_USER: postgres
      PG_META_DB_PASSWORD: \${${envPrefix}_POSTGRES_PASSWORD}
    networks:
      - lightstack

# Secrets that need to be saved:
# Secrets are now in .env file with ${envPrefix}_ prefix
`;
}

// Generate Kong configuration
export function generateKongConfig(): string {
  return `_format_version: "2.1"
_transform: true

services:
  - name: auth-v1-open
    url: http://auth:9999/verify
    routes:
      - name: auth-v1-open
        strip_path: true
        paths:
          - /auth/v1/verify
    plugins:
      - name: cors

  - name: auth-v1-open-callback
    url: http://auth:9999/callback
    routes:
      - name: auth-v1-open-callback
        strip_path: true
        paths:
          - /auth/v1/callback
    plugins:
      - name: cors

  - name: auth-v1-open-authorize
    url: http://auth:9999/authorize
    routes:
      - name: auth-v1-open-authorize
        strip_path: true
        paths:
          - /auth/v1/authorize
    plugins:
      - name: cors

  - name: rest-v1
    url: http://rest:3000/
    routes:
      - name: rest-v1-all
        strip_path: true
        paths:
          - /rest/v1/
    plugins:
      - name: cors
      - name: key-auth
        config:
          hide_credentials: false

  - name: realtime-v1
    url: http://realtime:4000/socket/
    routes:
      - name: realtime-v1-all
        strip_path: true
        paths:
          - /realtime/v1/
    plugins:
      - name: cors
      - name: key-auth
        config:
          hide_credentials: false

  - name: storage-v1
    url: http://storage:5000/
    routes:
      - name: storage-v1-all
        strip_path: true
        paths:
          - /storage/v1/
    plugins:
      - name: cors

plugins:
  - name: cors
    config:
      origins:
        - "*"
      credentials: true
      methods:
        - GET
        - POST
        - PUT
        - DELETE
        - OPTIONS
        - HEAD
        - PATCH
      headers:
        - Authorization
        - Content-Type
        - X-Client-Info
        - Apikey
      exposed_headers:
        - Content-Range
        - X-Supabase-Api-Version
      preflight_continue: false
      max_age: 3600

  - name: key-auth
    config:
      key_names:
        - apikey
      hide_credentials: true
`;
}

// Generate .env template for production
export function generateSupabaseEnvTemplate(secrets: ReturnType<typeof generateSupabaseSecrets>): string {
  return `# Supabase Production Secrets
# Generated by Lightstack CLI
# SAVE THIS FILE SECURELY - These secrets cannot be recovered!

# Database
POSTGRES_PASSWORD=${secrets.postgresPassword}

# JWT
JWT_SECRET=${secrets.jwtSecret}
ANON_KEY=${secrets.anonKey}
SERVICE_KEY=${secrets.serviceKey}

# SMTP Configuration (required for auth emails in production)
SMTP_HOST=
SMTP_PORT=587
SMTP_USER=
SMTP_PASS=
SMTP_SENDER_NAME=${process.env.PROJECT_NAME || 'Lightstack'}

# Optional: S3 for file storage (defaults to local filesystem)
# AWS_ACCESS_KEY_ID=
# AWS_SECRET_ACCESS_KEY=
# S3_BUCKET_NAME=
# S3_REGION=
`;
}

/**
 * Get the path to the bundled Supabase templates directory
 */
export function getSupabaseTemplatePath(): string {
  // In production (dist/), templates are at dist/templates/supabase
  // In development (src/), templates are at templates/supabase (from project root)
  const distTemplates = path.join(__dirname, '..', 'templates', 'supabase');
  const srcTemplates = path.join(__dirname, '..', '..', 'templates', 'supabase');

  // Check which path exists (prefer dist for production builds)
  // Note: This function is no longer used but kept for backward compatibility
  return distTemplates || srcTemplates;
}

/**
 * Create environment file for official Supabase stack
 * Uses actual secret values (not variable references) for Docker Compose compatibility
 */
export function createSupabaseEnvFile(env: string, projectName: string, domain: string, secrets: Record<string, string>): string {
  const prefix = env.toUpperCase();

  // Get actual secret values from the secrets object
  const postgresPassword = secrets[`${prefix}_POSTGRES_PASSWORD`] || '';
  const jwtSecret = secrets[`${prefix}_JWT_SECRET`] || '';
  const anonKey = secrets[`${prefix}_ANON_KEY`] || '';
  const serviceKey = secrets[`${prefix}_SERVICE_KEY`] || '';

  return `############
# Supabase Self-Hosted Stack Configuration
# Generated by Lightstack CLI for ${env} environment
# Contains actual secret values (not variable references)
############

# PostgreSQL Database
POSTGRES_HOST=db
POSTGRES_PORT=5432
POSTGRES_DB=postgres
POSTGRES_PASSWORD=${postgresPassword}

# JWT Configuration
JWT_SECRET=${jwtSecret}
JWT_EXPIRY=3600
ANON_KEY=${anonKey}
SERVICE_ROLE_KEY=${serviceKey}

# API Configuration
API_EXTERNAL_URL=https://api.${domain}
SUPABASE_PUBLIC_URL=https://api.${domain}

# Studio Configuration
STUDIO_DEFAULT_ORGANIZATION=${projectName}
STUDIO_DEFAULT_PROJECT=${projectName}

# Auth Configuration
SITE_URL=https://${domain}
ADDITIONAL_REDIRECT_URLS=
DISABLE_SIGNUP=false
ENABLE_EMAIL_SIGNUP=true
ENABLE_EMAIL_AUTOCONFIRM=${env === 'production' ? 'false' : 'true'}
ENABLE_PHONE_SIGNUP=false
ENABLE_PHONE_AUTOCONFIRM=false
ENABLE_ANONYMOUS_USERS=false

# SMTP Configuration (for auth emails)
SMTP_ADMIN_EMAIL=admin@${domain}
SMTP_HOST=
SMTP_PORT=587
SMTP_USER=
SMTP_PASS=
SMTP_SENDER_NAME=${projectName}

# Email Templates
MAILER_URLPATHS_INVITE=/auth/v1/verify
MAILER_URLPATHS_CONFIRMATION=/auth/v1/verify
MAILER_URLPATHS_RECOVERY=/auth/v1/verify
MAILER_URLPATHS_EMAIL_CHANGE=/auth/v1/verify

############
# Dashboard Credentials
############

DASHBOARD_USERNAME=supabase
DASHBOARD_PASSWORD=${postgresPassword}

############
# Database Settings
############

PGRST_DB_SCHEMAS=public,storage,graphql_public

############
# Kong API Gateway
############

KONG_HTTP_PORT=8000
KONG_HTTPS_PORT=8443

############
# Analytics
############

LOGFLARE_PUBLIC_ACCESS_TOKEN=${jwtSecret}
LOGFLARE_PRIVATE_ACCESS_TOKEN=${jwtSecret}

############
# Realtime
############

SECRET_KEY_BASE=${jwtSecret}

############
# Connection Pooler
############

POOLER_TENANT_ID=pooler
POOLER_DEFAULT_POOL_SIZE=20
POOLER_MAX_CLIENT_CONN=100
POOLER_DB_POOL_SIZE=10
POOLER_PROXY_PORT_TRANSACTION=6543

############
# Encryption Keys
############

VAULT_ENC_KEY=${secrets[`${prefix}_VAULT_ENC_KEY`] || ''}
PG_META_CRYPTO_KEY=${secrets[`${prefix}_PG_META_CRYPTO_KEY`] || ''}

############
# Functions
############

FUNCTIONS_VERIFY_JWT=false

############
# Misc
############

IMGPROXY_ENABLE_WEBP_DETECTION=true
DOCKER_SOCKET_LOCATION=/var/run/docker.sock
`;
}