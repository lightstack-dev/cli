import { existsSync, readFileSync } from 'fs';

export interface DockerfileConfig {
  nodeVersion?: string;
  packageManager?: 'npm' | 'yarn' | 'pnpm' | 'bun';
  buildCommand?: string;
  startCommand?: string;
  appPort?: number;
  hasNext?: boolean;
}

/**
 * Generates a multi-stage Dockerfile for Node.js applications
 */
export function generateDockerfile(config: DockerfileConfig = {}): string {
  const {
    nodeVersion = '20-alpine',
    packageManager = 'npm',
    buildCommand = 'build',
    startCommand = 'start',
    appPort = 3000,
    hasNext = false
  } = config;

  // Validate package.json exists and has required scripts
  if (existsSync('package.json')) {
    const packageJsonContent = readFileSync('package.json', 'utf-8');
    const packageJson = JSON.parse(packageJsonContent) as { scripts?: Record<string, string> };
    const scripts = packageJson.scripts || {};

    if (!scripts[buildCommand]) {
      throw new Error(
        `Your package.json is missing required scripts. Add: "scripts": { "${buildCommand}": "..." }`
      );
    }

    if (!scripts[startCommand]) {
      throw new Error(
        `Your package.json is missing required scripts. Add: "scripts": { "${startCommand}": "..." }`
      );
    }
  } else {
    throw new Error('No package.json found in the current directory');
  }

  // Package manager specific commands
  const lockFile = {
    npm: 'package-lock.json',
    yarn: 'yarn.lock',
    pnpm: 'pnpm-lock.yaml',
    bun: 'bun.lockb'
  }[packageManager];

  const installCommand = {
    npm: 'npm ci',
    yarn: 'yarn install --frozen-lockfile',
    pnpm: 'pnpm install --frozen-lockfile',
    bun: 'bun install --frozen-lockfile'
  }[packageManager];

  const installProdCommand = {
    npm: 'npm ci --only=production',
    yarn: 'yarn install --frozen-lockfile --production',
    pnpm: 'pnpm install --frozen-lockfile --prod',
    bun: 'bun install --frozen-lockfile --production'
  }[packageManager];

  const runCommand = packageManager === 'bun' ? 'bun' : packageManager === 'yarn' ? 'yarn' : 'npm run';

  // Next.js specific adjustments
  const nextSpecific = hasNext ? `
# Next.js public files
COPY --from=builder --chown=nodejs:nodejs /app/public ./public
COPY --from=builder --chown=nodejs:nodejs /app/.next/standalone ./
COPY --from=builder --chown=nodejs:nodejs /app/.next/static ./.next/static` : '';

  const startCmd = hasNext
    ? `CMD ["node", "server.js"]`
    : `CMD ["${runCommand.split(' ')[0]}", "${startCommand === 'start' ? 'start' : `run ${startCommand}`}"]`;

  return `# Multi-stage Dockerfile for Node.js application
# Generated by Lightstack CLI

# Stage 1: Dependencies
FROM node:${nodeVersion} AS deps
WORKDIR /app

# Copy package files
COPY package.json ${lockFile} ./

# Install production dependencies
RUN ${installProdCommand}

# Stage 2: Build
FROM node:${nodeVersion} AS builder
WORKDIR /app

# Copy package files
COPY package.json ${lockFile} ./

# Install all dependencies (including dev)
RUN ${installCommand}

# Copy source code
COPY . .

# Build the application
RUN ${runCommand} ${buildCommand}

# Stage 3: Production
FROM node:${nodeVersion} AS runner
WORKDIR /app

# Set production environment
ENV NODE_ENV=production

# Create non-root user
RUN addgroup -g 1001 -S nodejs && adduser -S nodejs -u 1001

# Copy dependencies
COPY --from=deps --chown=nodejs:nodejs /app/node_modules ./node_modules

# Copy built application
${hasNext ? nextSpecific : `COPY --from=builder --chown=nodejs:nodejs /app ./`}

# Copy package.json for scripts
COPY --chown=nodejs:nodejs package.json ./

# Switch to non-root user
USER nodejs

# Expose application port
EXPOSE ${appPort}

# Start the application
${startCmd}
`;
}